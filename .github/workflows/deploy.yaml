name: Deploy Helm Chart

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'gke'
        type: choice
        options:
          - gke
          - eks
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'gke' }}
    env:
      USE_GKE_GCLOUD_AUTH_PLUGIN: True
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure kubectl for GKE
        run: |
          gcloud container clusters get-credentials tsuro \
            --region us-central1 \
            --project self-host-kubernetes

      - name: Validate AWS Account ID secret
        run: |
          if [ -z "${{ secrets.AWS_ACCOUNT_ID }}" ]; then
            echo "‚ùå Error: AWS_ACCOUNT_ID secret is not set"
            exit 1
          fi
          echo "‚úÖ AWS Account ID secret is available"

      - name: Add dependency repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add temporal https://go.temporal.io/helm-charts
          helm repo update

      - name: Check if chart directory exists
        run: |
          if [ ! -d "composio" ]; then
            echo "Error: composio directory not found"
            echo "Available directories:"
            ls -la
            exit 1
          fi

      - name: Cleanup failed pre-upgrade hooks
        run: |
          echo "üßπ Checking for existing pre-upgrade hook jobs..."
          
          # Check for existing db-init job
          if kubectl get job composio-db-init -n composio 2>/dev/null; then
            JOB_STATUS=$(kubectl get job composio-db-init -n composio -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' 2>/dev/null || echo "")
            
            if [[ "$JOB_STATUS" != "True" ]]; then
              echo "‚ö†Ô∏è  Found existing composio-db-init job that is not completed. Deleting..."
              kubectl delete job composio-db-init -n composio
              echo "‚úÖ Deleted failed composio-db-init job"
            else
              echo "‚úÖ composio-db-init job already exists and is completed"
            fi
          else
            echo "‚úÖ No existing composio-db-init job found"
          fi
          
          # Check for any other potential hook jobs that might cause conflicts
          HOOK_JOBS=$(kubectl get jobs -n composio -l "app.kubernetes.io/managed-by=Helm" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
          
          if [[ -n "$HOOK_JOBS" ]]; then
                         for job in $HOOK_JOBS; do
               JOB_STATUS=$(kubectl get job $job -n composio -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' 2>/dev/null || echo "")
               if [[ "$JOB_STATUS" != "True" ]]; then
                 echo "‚ö†Ô∏è  Found failed Helm hook job: $job. Deleting..."
                 kubectl delete job $job -n composio
                 echo "‚úÖ Deleted failed job: $job"
               fi
             done
           fi
           
                     # Clean up any orphaned pods from deleted jobs
          echo "üßπ Cleaning up any orphaned job pods..."
          kubectl delete pods -n composio -l "job-name=composio-db-init" --ignore-not-found=true
           
           # Wait a moment for cleanup to complete
           sleep 2

      - name: Deploy Helm Chart
        run: |
          cd composio
          
          # Handle dependencies if Chart.yaml exists
          if [ -f "Chart.yaml" ]; then
            echo "Found Chart.yaml, handling dependencies..."
            
            # Check if dependencies are defined
            if grep -q "dependencies:" Chart.yaml; then
              echo "Dependencies found in Chart.yaml"
              
              # Try dependency update first, then build
              helm dependency update || {
                echo "dependency update failed, trying dependency build..."
                helm dependency build
              }
            else
              echo "No dependencies defined in Chart.yaml"
            fi
          fi
          
          # Check if values.yaml exists and substitute AWS_ACCOUNT_ID
          if [ ! -f "values.yaml" ]; then
            echo "Warning: values.yaml not found, proceeding without custom values"
            VALUES_FLAG=""
          else
            echo "Substituting AWS_ACCOUNT_ID in values.yaml..."
            # Create a temporary values file with AWS_ACCOUNT_ID substituted
            sed "s/AWS_ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g" values.yaml > values-substituted.yaml
            VALUES_FLAG="--values ./values-substituted.yaml"
            
            # Show what was substituted for verification (without exposing the secret)
            echo "Image repositories updated with AWS Account ID (***$(echo '${{ secrets.AWS_ACCOUNT_ID }}' | tail -c 5))"
          fi
          
          # Deploy with helm upgrade --install
          echo "üöÄ Starting Helm deployment..."
          
          if ! helm upgrade --install composio . \
            --namespace composio \
            --create-namespace \
            --wait \
            --timeout 10m \
            $VALUES_FLAG \
            --set global.imageTag=${{ github.event.inputs.image_tag || 'latest' }} \
            --set apollo.image.tag=${{ github.event.inputs.image_tag || 'latest' }} \
            --set mercury.image.tag=${{ github.event.inputs.image_tag || 'latest' }} \
            --set thermos.image.tag=${{ github.event.inputs.image_tag || 'latest' }} \
            --set mcp.image.tag=${{ github.event.inputs.image_tag || 'latest' }}; then
            
            echo "‚ùå Helm deployment failed"
            
            # Check if this was an upgrade (not initial install)
            if helm list -n composio | grep -q composio; then
              echo "üîÑ Attempting to rollback to previous revision..."
              
              # Get previous revision
              CURRENT_REV=$(helm list -n composio -o json | jq -r '.[] | select(.name=="composio") | .revision')
              PREVIOUS_REV=$((CURRENT_REV - 1))
              
              if [[ $PREVIOUS_REV -gt 0 ]]; then
                echo "‚è™ Rolling back from revision $CURRENT_REV to $PREVIOUS_REV"
                helm rollback composio $PREVIOUS_REV -n composio
                echo "‚úÖ Rollback completed"
              else
                echo "‚ö†Ô∏è No previous revision to rollback to"
              fi
            fi
            
            exit 1
          fi
          
          echo "‚úÖ Helm deployment completed successfully"

      - name: Verify Helm deployment status
        run: |
          echo "üìä Checking Helm release status..."
          helm status composio -n composio
          
          # Get the revision number
          REVISION=$(helm list -n composio -o json | jq -r '.[] | select(.name=="composio") | .revision')
          echo "üè∑Ô∏è Current revision: $REVISION"

      - name: Wait for deployment rollout
        run: |
          echo "‚è≥ Waiting for all deployments to be ready..."
          
          # Get all deployments in the namespace
          DEPLOYMENTS=$(kubectl get deployments -n composio -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
          
          if [ -z "$DEPLOYMENTS" ]; then
            echo "No deployments found in composio namespace"
            kubectl get all -n composio
          else
            # Wait for each deployment to complete rollout
            for deployment in $DEPLOYMENTS; do
              echo "Waiting for deployment: $deployment"
              kubectl rollout status deployment/$deployment -n composio --timeout=300s
            done
          fi

      - name: Verify pod health
        run: |
          echo "üè• Checking pod health and readiness..."
          
          # Check if all pods are running and ready
          kubectl get pods -n composio --no-headers | while read line; do
            pod_name=$(echo $line | awk '{print $1}')
            pod_status=$(echo $line | awk '{print $3}')
            pod_ready=$(echo $line | awk '{print $2}')
            
            echo "Pod: $pod_name | Status: $pod_status | Ready: $pod_ready"
            
            if [[ "$pod_status" != "Running" && "$pod_status" != "Completed" ]]; then
              echo "‚ùå Pod $pod_name is not in Running state: $pod_status"
              kubectl describe pod $pod_name -n composio
              exit 1
            fi
          done
          
          echo "‚úÖ All pods are healthy!"

      - name: Verify services and endpoints
        run: |
          echo "üîó Checking services and endpoints..."
          
          # List services
          kubectl get services -n composio
          
          # Check that services have endpoints
          for service in $(kubectl get services -n composio --no-headers -o custom-columns=":metadata.name" | grep -v kubernetes); do
            endpoints=$(kubectl get endpoints $service -n composio -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null || echo "")
            if [[ -z "$endpoints" ]]; then
              echo "‚ö†Ô∏è Warning: Service $service has no endpoints"
            else
              echo "‚úÖ Service $service has endpoints: $endpoints"
            fi
          done

      - name: Run smoke tests
        run: |
          echo "üß™ Running basic smoke tests..."
          
          # Test if Apollo service is responding (if it has a health endpoint)
          APOLLO_POD=$(kubectl get pods -n composio -l app=apollo -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          if [[ -n "$APOLLO_POD" ]]; then
            echo "Testing Apollo pod: $APOLLO_POD"
            # Add your specific health check here, for example:
            # kubectl exec $APOLLO_POD -n composio -- curl -f http://localhost:8080/health || echo "Health check endpoint not available"
          fi
          
          echo "‚úÖ Basic smoke tests completed"

      - name: Display deployment summary
        run: |
          echo "üìã Deployment Summary"
          echo "===================="
          echo "üè∑Ô∏è Image Tag: ${{ github.event.inputs.image_tag || 'latest' }}"
          echo "üåç Environment: ${{ github.event.inputs.environment || 'gke' }}"
          echo "üì¶ Release: composio"
          echo "üì¶ Namespace: composio"
          echo ""
          echo "üìä Resource Status:"
          kubectl get all -n composio
          
      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "üöÄ ‚úÖ Deployment SUCCESS for *${{ github.event.inputs.image_tag || 'latest' }}* to *composio* release in *composio* namespace on *${{ github.event.inputs.environment || 'gke' }}*"

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "üí• ‚ùå Deployment FAILED for *${{ github.event.inputs.image_tag || 'latest' }}* to *composio* release in *composio* namespace on *${{ github.event.inputs.environment || 'gke' }}*. Check GitHub Actions for details."

      - name: Cleanup temporary files
        if: always()
        run: |
          # Remove temporary values file if it was created
          if [ -f "composio/values-substituted.yaml" ]; then
            rm composio/values-substituted.yaml
            echo "üßπ Cleaned up temporary values file"
          fi
