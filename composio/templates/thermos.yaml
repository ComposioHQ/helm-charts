apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-thermos
  labels:
    app: thermos
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.thermos.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: thermos
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: thermos
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.thermos.dbInit.enabled }}
      initContainers:
        - name: thermos-db-init
          image: "{{ .Values.thermos.dbInit.image.repository }}:{{ .Values.thermos.dbInit.image.tag }}"
          imagePullPolicy: {{ .Values.thermos.dbInit.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: external-postgres-secret
                  key: url
            - name: COMPOSIO_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-composio-api-key
                  key: COMPOSIO_API_KEY
            - name: ADMIN_EMAIL
              value: {{ .Values.dbInit.adminEmail | default "hello@composio.dev" | quote }}
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
      {{- end }}
      containers:
        - name: thermos
          image: "{{ .Values.thermos.image.repository }}:{{ .Values.thermos.image.tag }}"
          imagePullPolicy: {{ .Values.thermos.image.pullPolicy }}
          command: ["/usr/local/bin/thermos", "--cache-dir", "/tmp/.lookup"]
          workingDir: "/tmp"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - containerPort: 8180
          livenessProbe:
            httpGet:
              path: /api
              port: 8180
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api
              port: 8180
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          env:
            - name: PORT
              value: "8180"
            - name: HOST
              value: "0.0.0.0"
            - name: APOLLO_ENDPOINT
              value: {{ printf "http://%s-apollo:9900" .Release.Name | quote }}
            - name: COMPOSIO_ENV
              value: "production"
            - name: APOLLO_ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-apollo-admin-token
                  key: APOLLO_ADMIN_TOKEN
            - name: LOG_ENCODING
              value: "json"
            - name: LOG_LEVEL
              value: "info"
            - name: OPENAPI
              value: "false"
            - name: POLLING_TRIGGER_SLEEP
              value: "60"
            - name: REGISTRY_LOOKUP_CACHE_DIR
              value: "/tmp/.lookup"
            - name: SELF_HOSTED
              value: "true"
            - name: TEMPORAL_CLOUD_HOST_PORT
              value: 
              value: "temporal-stack-frontend:7233"
            - name: TEMPORAL_CLOUD_NAMESPACE
              value: "default"
            - name: DISABLE_TEMPORAL_TLS
              value: "true"
            - name: LAMBDA_USE_HTTP
              value: "true"
            - name: LAMBDA_USE_HTTP_ENDPOINT
              value: "http://{{ include "composio.fullname" . }}-mercury.composio.svc.cluster.local"
            - name: AWS_LAMBDA_REGION
              value: {{ .Values.aws.region | quote }}
            - name: AWS_S3_REGION
              value: {{ .Values.aws.region | quote }}
            - name: AWS_S3_LAMBDA_BUCKET_NAME
              value: {{ .Values.aws.s3.lambdaBucketName | quote }}
            - name: LAMBDA_FUNCTION_NAME
              value: {{ .Values.aws.lambda.functionName | quote }}
            # Minio credentials as AWS S3 environment variables
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-minio-credentials
                  key: MINIO_ROOT_USER
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-minio-credentials
                  key: MINIO_ROOT_PASSWORD
            - name: AWS_S3_ENDPOINT
              value: "http://{{ .Release.Name }}-minio:9000"
            - name: AWS_S3_FORCE_PATH_STYLE
              value: "true"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: external-postgres-secret
                  key: url
            - name: THERMOS_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: external-postgres-secret
                  key: url
            {{- if .Values.thermos.env }}
            {{- toYaml .Values.thermos.env | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: cache-volume
              mountPath: /tmp
          resources:
            {{- toYaml .Values.thermos.resources | nindent 12 }}
      volumes:
        - name: cache-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-thermos
  labels:
    app: thermos
    release: {{ .Release.Name }}
spec:
  type: {{ .Values.thermos.service.type }}
  ports:
    - port: {{ .Values.thermos.service.port }}
      targetPort: 8180
      protocol: TCP
  selector:
    app: thermos
    release: {{ .Release.Name }}
---
{{- if .Values.thermos.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-thermos
  labels:
    app: thermos
    release: {{ .Release.Name }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}-thermos
  minReplicas: {{ .Values.thermos.autoscaling.minReplicas | default 2 }}
  maxReplicas: {{ .Values.thermos.autoscaling.maxReplicas | default 10 }}
  metrics:
    {{- if .Values.thermos.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.thermos.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.thermos.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.thermos.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: {{ .Values.thermos.autoscaling.scaleDownStabilizationWindowSeconds | default 300 }}
      policies:
      - type: Percent
        value: {{ .Values.thermos.autoscaling.scaleDownPercent | default 10 }}
        periodSeconds: {{ .Values.thermos.autoscaling.scaleDownPeriodSeconds | default 60 }}
    scaleUp:
      stabilizationWindowSeconds: {{ .Values.thermos.autoscaling.scaleUpStabilizationWindowSeconds | default 60 }}
      policies:
      - type: Percent
        value: {{ .Values.thermos.autoscaling.scaleUpPercent | default 100 }}
        periodSeconds: {{ .Values.thermos.autoscaling.scaleUpPeriodSeconds | default 15 }}
      - type: Pods
        value: {{ .Values.thermos.autoscaling.scaleUpPods | default 4 }}
        periodSeconds: {{ .Values.thermos.autoscaling.scaleUpPeriodSeconds | default 15 }}
      selectPolicy: Max
{{- end }} 
