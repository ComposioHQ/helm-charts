{{/*
Application secrets template - These secrets are managed by secret-setup.sh script
and should not be recreated during Helm upgrades to preserve existing values.
*/}}

{{- if .Values.secrets.createAppSecrets }}
# Application secrets are managed by secret-setup.sh script
# These templates are only for reference and should not be created by Helm
# to prevent overwriting existing secrets during upgrades.

{{- $secrets := list "apollo-admin-token" "encryption-key" "temporal-encryption-key" "composio-api-key" "minio-credentials" }}
{{- range $secret := $secrets }}
{{- $secretName := printf "%s-%s" $.Release.Name $secret }}
{{- if not (lookup "v1" "Secret" $.Release.Namespace $secretName) }}
---
# Secret {{ $secretName }} would be created by secret-setup.sh script
# This is a placeholder to show what secrets are expected
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "composio.labels" $ | nindent 4 }}
  annotations:
    "composio.dev/secret-type": "application"
    "composio.dev/managed-by": "secret-setup.sh"
    "composio.dev/do-not-recreate": "true"
type: Opaque
stringData:
  # This secret should be created using secret-setup.sh script
  # to avoid overwriting existing values during Helm upgrades
  placeholder: "use-secret-setup-script"
{{- else }}
# Secret {{ $secretName }} already exists - skipping to preserve existing values
{{- end }}
{{- end }}
{{- end }}
