apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "composio.fullname" . }}-minio
  labels:
    {{- include "composio.labels" . | nindent 4 }}
    app.kubernetes.io/component: minio
spec:
  replicas: {{ .Values.minio.replicas | default 1 }}
  selector:
    matchLabels:
      {{- include "composio.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: minio
  template:
    metadata:
      labels:
        {{- include "composio.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: minio
    spec:
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: minio-data-init
          image: "{{ .Values.minio.image.repository }}:{{ .Values.minio.image.tag | default .Chart.AppVersion }}"
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "=== MINIO SELECTIVE INIT CONTAINER ==="
              echo "Contents of /mnt/persistent-data:"
              ls -la /mnt/persistent-data/ || echo "Directory does not exist or is empty"
              echo ""
              echo "Contents of /data (from Docker image):"
              ls -la /data/ || echo "Directory does not exist or is empty"
              echo ""
              
              # Check if this is first startup
              if [ ! -d "/mnt/persistent-data/.minio.sys" ]; then
                echo "✅ First startup detected - no .minio.sys found in persistent volume"
                echo "Checking for pre-built data in Docker image..."
                if [ -d "/data" ] && [ "$(ls -A /data 2>/dev/null)" ]; then
                  echo "✅ Found pre-built data in Docker image /data:"
                  ls -la /data/
                  echo "Copying ALL data from /data to /mnt/persistent-data (first startup)..."
                  cp -r /data/* /mnt/persistent-data/ 2>/dev/null || true
                  cp /data/.lookup.zip /mnt/persistent-data/ 2>/dev/null || true
                  echo "✅ Initial data copied successfully!"
                else
                  echo "❌ No pre-built data found in Docker image /data directory"
                fi
              else
                echo "✅ Existing MinIO installation detected - performing selective updates"
                echo "Contents of existing persistent volume:"
                ls -la /mnt/persistent-data/
                echo ""
                
                # Always update specific items from the new image
                echo "🔄 Updating /api folder and .lookup.zip from new image..."
                
                # Update .lookup.zip if it exists in the image
                if [ -f "/data/.lookup.zip" ]; then
                  echo "  → Updating .lookup.zip"
                  cp /data/.lookup.zip /mnt/persistent-data/
                else
                  echo "  → No .lookup.zip found in new image"
                fi
                
                # Update api folder if it exists in the image
                if [ -d "/data/api" ]; then
                  echo "  → Updating /api folder"
                  rm -rf /mnt/persistent-data/api 2>/dev/null || true
                  cp -r /data/api /mnt/persistent-data/
                else
                  echo "  → No /api folder found in new image"
                fi
                
                # Update any api folders and .lookup.zip files within buckets (e.g., tools/api, tools/.lookup.zip)
                for bucket_dir in /data/*/; do
                  if [ -d "${bucket_dir}" ]; then
                    bucket_name=$(basename "${bucket_dir}")
                    
                    # Update .lookup.zip within bucket
                    if [ -f "/data/${bucket_name}/.lookup.zip" ]; then
                      echo "  → Updating /${bucket_name}/.lookup.zip"
                      mkdir -p "/mnt/persistent-data/${bucket_name}"
                      cp "/data/${bucket_name}/.lookup.zip" "/mnt/persistent-data/${bucket_name}/"
                    fi
                    
                    # Update api folder within bucket
                    if [ -d "/data/${bucket_name}/api" ]; then
                      echo "  → Updating /${bucket_name}/api folder"
                      mkdir -p "/mnt/persistent-data/${bucket_name}"
                      rm -rf "/mnt/persistent-data/${bucket_name}/api" 2>/dev/null || true
                      cp -r "/data/${bucket_name}/api" "/mnt/persistent-data/${bucket_name}/"
                    fi
                  fi
                done
                
                echo "✅ Selective updates completed!"
              fi
              
              echo ""
              echo "Final contents of persistent volume:"
              ls -la /mnt/persistent-data/
          volumeMounts:
            - name: data
              mountPath: /mnt/persistent-data
          securityContext:
            {{- toYaml .Values.minio.securityContext | nindent 12 }}
      containers:
        - name: {{ .Chart.Name }}-minio
          securityContext:
            {{- toYaml .Values.minio.securityContext | nindent 12 }}
          image: "{{ .Values.minio.image.repository }}:{{ .Values.minio.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.minio.image.pullPolicy }}
          ports:
            - name: api
              containerPort: 9000
              protocol: TCP
            - name: console
              containerPort: 9001
              protocol: TCP
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-minio-credentials
                  key: MINIO_ROOT_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-minio-credentials
                  key: MINIO_ROOT_PASSWORD
            {{- with .Values.minio.extraEnvVars }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
          resources:
            {{- toYaml .Values.minio.resources | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.minio.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.minio.readinessProbe | nindent 12 }}
      volumes:
        - name: data
          {{- if .Values.minio.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "composio.fullname" . }}-minio
          {{- else }}
          emptyDir: {}
          {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "composio.fullname" . }}-minio
  labels:
    {{- include "composio.labels" . | nindent 4 }}
    app.kubernetes.io/component: minio
spec:
  type: {{ .Values.minio.service.type }}
  ports:
    - port: 9000
      targetPort: api
      protocol: TCP
      name: api
    - port: 9001
      targetPort: console
      protocol: TCP
      name: console
  selector:
    {{- include "composio.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: minio
{{- if .Values.minio.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "composio.fullname" . }}-minio
  labels:
    {{- include "composio.labels" . | nindent 4 }}
    app.kubernetes.io/component: minio
spec:
  accessModes:
    - {{ .Values.minio.persistence.accessMode | quote }}
  resources:
    requests:
      storage: {{ .Values.minio.persistence.size | quote }}
  {{- if .Values.minio.persistence.storageClass }}
  storageClassName: {{ .Values.minio.persistence.storageClass }}
  {{- end }}
{{- end }} 