{{- if .Values.mercury.useKnative }}
{{- if .Values.namespace.create }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-serving
  labels:
    {{- include "composio.labels" . | nindent 4 }}
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-7"
{{- end }}
---
# Job to configure Knative after installation
apiVersion: batch/v1
kind: Job
metadata:
  name: knative-config-{{ .Release.Revision }}
  namespace: {{ include "composio.namespace" . }}
  labels:
    {{- include "composio.labels" . | nindent 4 }}
    app.kubernetes.io/component: knative-config
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: knative-config
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          echo "üîß Configuring Knative for optimal performance..."
          
          # Wait for knative-serving namespace and core components
          echo "‚è≥ Waiting for Knative serving namespace..."
          kubectl wait --for condition=Ready --timeout=300s namespace/knative-serving || {
            echo "‚ö†Ô∏è  Timeout waiting for namespace, but continuing..."
          }
          
          # Wait for config-network ConfigMap to exist
          echo "‚è≥ Waiting for config-network ConfigMap..."
          while ! kubectl get configmap config-network -n knative-serving >/dev/null 2>&1; do
            echo "  Waiting for config-network ConfigMap to be created..."
            sleep 10
          done
          
          # Configure domain template for cluster-local services
          echo "üåê Configuring domain settings..."
          kubectl patch configmap config-domain -n knative-serving --type merge --patch '
          {
            "data": {
              "svc.cluster.local": ""
            }
          }' || echo "‚ö†Ô∏è  Domain config patch failed, may already be configured"
          
          # Configure network settings for cluster-local services
          echo "üîó Configuring network settings..."
          kubectl patch configmap config-network -n knative-serving --type merge --patch '
          {
            "data": {
              "ingress-class": "kourier.ingress.networking.knative.dev",
              "domainTemplate": "{{.Name}}.{{.Namespace}}.{{.Domain}}"
            }
          }' || echo "‚ö†Ô∏è  Network config patch may have already been applied"
          
          # Configure defaults for GKE Autopilot optimization
          echo "‚öôÔ∏è  Configuring defaults for GKE Autopilot..."
          kubectl patch configmap config-defaults -n knative-serving --type merge --patch '
          {
            "data": {
              "revision-timeout-seconds": "300",
              "max-revision-timeout-seconds": "600", 
              "revision-cpu-request": "100m",
              "revision-memory-request": "128Mi",
              "revision-cpu-limit": "1000m",
              "revision-memory-limit": "1Gi"
            }
          }' || echo "‚ö†Ô∏è  Defaults config patch failed, may already be configured"
          
          echo "‚úÖ Knative configuration completed!"
          echo "üìä Configuration summary:"
          echo "  ‚Ä¢ Domain: cluster-local services enabled"
          echo "  ‚Ä¢ Network: Kourier ingress configured"
          echo "  ‚Ä¢ Defaults: GKE Autopilot optimized"
          
          # Verify configuration
          echo "üîç Verifying configuration..."
          kubectl get configmap config-network -n knative-serving -o jsonpath='{.data.ingress-class}' || echo "Could not verify ingress-class"
          echo ""
          echo "üéâ Knative configuration job completed!"
        resources:
          requests:
            memory: 64Mi
            cpu: 50m
          limits:
            memory: 128Mi
            cpu: 100m
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
{{- end }}
