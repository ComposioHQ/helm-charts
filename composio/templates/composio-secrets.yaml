{{/*
Auto-generate secrets on first install, persist across upgrades
*/}}
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-secrets" .Release.Name)) }}
{{- $adminToken := "" }}
{{- $encryptionKey := "" }}
{{- $temporalEncryptionKey := "" }}
{{- $minioRootUser := "" }}
{{- $minioRootPassword := "" }}
{{- $authSecret := "" }}
{{- $composioApiKey := "" }}
{{- $bootstrapApiKey := "" }}

{{- if $secretObj }}
  {{/* Secret exists, use existing values */}}
  {{- $adminToken = index $secretObj.data "APOLLO_ADMIN_TOKEN" }}
  {{- $encryptionKey = index $secretObj.data "ENCRYPTION_KEY" }}
  {{- $temporalEncryptionKey = index $secretObj.data "TEMPORAL_TRIGGER_ENCRYPTION_KEY" }}
  {{- $minioRootUser = index $secretObj.data "MINIO_ROOT_USER" }}
  {{- $minioRootPassword = index $secretObj.data "MINIO_ROOT_PASSWORD" }}
  {{- $authSecret = index $secretObj.data "AUTH_SECRET" }}
  {{- $composioApiKey = index $secretObj.data "COMPOSIO_API_KEY" }}
  {{- $bootstrapApiKey = index $secretObj.data "BOOTSTRAP_API_KEY_VALUE" }}
{{- else }}
  {{/* Secret doesn't exist, generate new values or use provided ones */}}
  {{- $adminToken = ((.Values.secrets).adminToken | default (randAlphaNum 32)) | b64enc }}
  {{- $encryptionKey = ((.Values.secrets).encryptionKey | default (randAlphaNum 32)) | b64enc }}
  {{- $temporalEncryptionKey = ((.Values.secrets).temporalEncryptionKey | default (randAlphaNum 32)) | b64enc }}
  {{- $minioRootUser = (.Values.minio.auth.rootUser | default "minioadmin") | b64enc }}
  {{- $minioRootPassword = (.Values.minio.auth.rootPassword | default (randAlphaNum 16)) | b64enc }}
  {{- $authSecret = ((.Values.secrets).authSecret | default (randAlphaNum 32)) | b64enc }}
  {{- $composioApiKey = ((.Values.secrets).composioApiKey | default (randAlphaNum 32)) | b64enc }}
  {{- $bootstrapApiKey = $composioApiKey }}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-secrets
  labels:
    app: composio
    release: {{ .Release.Name }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
type: Opaque
data:
  # Database configuration is now handled by external-postgres-secret
  # DATABASE_URL is referenced directly from external-postgres-secret
  
  # Global Redis configuration (external or auto-generated from chart dependencies)
  {{- if .Values.externalRedis.enabled }}
  REDIS_URL: {{ printf "%s" .Values.externalSecrets.redis.url | b64enc }}
  {{- else }}
  REDIS_URL: {{ printf "redis://:%s@%s-redis-master:6379" .Values.redis.auth.password .Release.Name | b64enc }}
  {{- end }}
  # Auto-generated secrets (generated once, persisted across upgrades)
  APOLLO_ADMIN_TOKEN: {{ $adminToken }}
  ENCRYPTION_KEY: {{ $encryptionKey }}
  TEMPORAL_TRIGGER_ENCRYPTION_KEY: {{ $temporalEncryptionKey }}
  MINIO_ROOT_USER: {{ $minioRootUser }}
  MINIO_ROOT_PASSWORD: {{ $minioRootPassword }} 
  AUTH_SECRET: {{ $authSecret }}
  COMPOSIO_API_KEY: {{ $composioApiKey }}
  BOOTSTRAP_API_KEY_VALUE: {{ $bootstrapApiKey }}