{{- if .Values.supportBundle.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "myapp.fullname" . }}-support-bundle
  namespace: {{ .Release.Namespace }}
  labels:
    troubleshoot.sh/kind: support-bundle
    {{- include "myapp.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
stringData:
  support-bundle-spec: |
    apiVersion: troubleshoot.sh/v1beta2
    kind: SupportBundle
    metadata:
      name: {{ include "myapp.fullname" . }}-support-bundle
    spec:
      collectors:
        # Basic cluster information
        - clusterInfo: {}
        - clusterResources: {}
        
        # Application-specific logs
        - logs:
            selector:
              - app.kubernetes.io/name={{ include "myapp.name" . }}
            namespace: {{ .Release.Namespace }}
            limits:
              maxAge: 720h
              maxLines: 10000
        
        # Application pods and events
        - logs:
            selector:
              - app.kubernetes.io/instance={{ .Release.Name }}
            namespace: {{ .Release.Namespace }}
            limits:
              maxAge: 720h
              maxLines: 10000
              
        # ConfigMaps and Secrets (metadata only)
        - configMap:
            name: "*"
            namespace: {{ .Release.Namespace }}
            includeValue: false
            
        - secret:
            name: "*"
            namespace: {{ .Release.Namespace }}
            includeValue: false
            
        # Services and Ingress
        - data:
            name: services.yaml
            data: |
              {{`{{ range $service := .Services }}`}}
              {{`{{ if eq $service.Namespace`}} "{{ .Release.Namespace }}" {{`}}`}}
              ---
              {{`{{ $service | toYaml }}`}}
              {{`{{ end }}`}}
              {{`{{ end }}`}}
              
        - data:
            name: ingress.yaml  
            data: |
              {{`{{ range $ingress := .Ingresses }}`}}
              {{`{{ if eq $ingress.Namespace`}} "{{ .Release.Namespace }}" {{`}}`}}
              ---
              {{`{{ $ingress | toYaml }}`}}
              {{`{{ end }}`}}
              {{`{{ end }}`}}
        
        # Helm release information
        - exec:
            name: helm-releases
            selector:
              - app=kubectl
            namespace: kube-system
            command: ["helm"]
            args: ["list", "-n", "{{ .Release.Namespace }}", "-o", "yaml"]
            timeout: 30s
            
        # Node information
        - nodeResources: {}
        
        # Storage information
        - storageClass: {}
        - persistentVolumes: {}
        - persistentVolumeClaims:
            namespace: {{ .Release.Namespace }}
            
        # Network policies
        - networkPolicy:
            namespace: {{ .Release.Namespace }}
            
        {{- if .Values.supportBundle.collectors.metrics.enabled }}
        # Custom metrics (if Prometheus is available)
        - exec:
            name: prometheus-metrics
            selector:
              - app.kubernetes.io/name=prometheus
            namespace: monitoring
            command: ["wget"]
            args: ["-O-", "http://localhost:9090/api/v1/query?query=up"]
            timeout: 10s
        {{- end }}
        
        {{- if .Values.supportBundle.collectors.database.enabled }}
        # Database connectivity check
        - exec:
            name: database-check
            selector:
              - app.kubernetes.io/component=database
            namespace: {{ .Release.Namespace }}
            command: ["sh"]
            args: ["-c", "echo 'SELECT 1' | psql -h localhost -U ${DB_USER} ${DB_NAME}"]
            timeout: 30s
        {{- end }}
        
      analyzers:
        # Cluster version check
        - clusterVersion:
            outcomes:
              - fail:
                  when: "< 1.20.0"
                  message: "Your cluster is running an unsupported version of Kubernetes. Please upgrade to 1.20.0 or later."
                  uri: https://kubernetes.io/docs/setup/release/version-skew-policy/
              - warn:
                  when: "< 1.25.0"
                  message: "Your cluster is running an older version of Kubernetes. Consider upgrading for the latest features and security updates."
              - pass:
                  message: "Your cluster is running a supported version of Kubernetes."
                  
        # Node resources check
        - nodeResources:
            checkName: "Node Resource Requirements"
            outcomes:
              - fail:
                  when: "count() < {{ .Values.supportBundle.analyzers.minNodes | default 1 }}"
                  message: "This application requires at least {{ .Values.supportBundle.analyzers.minNodes | default 1 }} node(s)."
              - fail:
                  when: "min(memoryCapacity) < {{ .Values.supportBundle.analyzers.minMemoryGB | default 2 }}Gi"
                  message: "This application requires nodes with at least {{ .Values.supportBundle.analyzers.minMemoryGB | default 2 }}GB of memory."
              - fail:
                  when: "min(cpuCapacity) < {{ .Values.supportBundle.analyzers.minCPU | default 1 }}"
                  message: "This application requires nodes with at least {{ .Values.supportBundle.analyzers.minCPU | default 1 }} CPU core(s)."
              - pass:
                  message: "All nodes meet the minimum resource requirements."
                  
        # Deployment status
        - deploymentStatus:
            name: {{ include "myapp.fullname" . }}
            namespace: {{ .Release.Namespace }}
            outcomes:
              - fail:
                  when: "< 1"
                  message: "The {{ include "myapp.fullname" . }} deployment is not ready. Check the pod logs for errors."
              - warn:
                  when: "= 1"
                  message: "The {{ include "myapp.fullname" . }} deployment has only one replica. Consider scaling for high availability."
              - pass:
                  when: "> 1"
                  message: "The {{ include "myapp.fullname" . }} deployment is healthy and running multiple replicas."
                  
        # Storage class analysis
        - storageClass:
            checkName: "Required Storage Classes"
            storageClassName: "{{ .Values.persistence.storageClass | default "default" }}"
            outcomes:
              - fail:
                  message: "The required storage class '{{ .Values.persistence.storageClass | default "default" }}' was not found in the cluster."
              - pass:
                  message: "The required storage class was found."
                  
        {{- if .Values.supportBundle.analyzers.customChecks }}
        # Custom log analysis
        - textAnalyze:
            checkName: "Application Error Logs"
            fileName: "*/logs/*/*.log"
            regex: '(?i)(error|exception|fatal|panic)'
            outcomes:
              - fail:
                  when: "true"
                  message: "Errors detected in application logs. Please review the logs for detailed error information."
              - pass:
                  when: "false"
                  message: "No critical errors found in application logs."
        {{- end }}
        
      # Sensitive data redaction
      redactors:
        - name: "Redact Passwords"
          file: "*/logs/*/*.log"
          regex: 
            - '(password=)([^&\s]+)'
            - '(token=)([^&\s]+)'
            - '(apikey=)([^&\s]+)'
          replacements:
            - '$1***HIDDEN***'
            - '$1***HIDDEN***'
            - '$1***HIDDEN***'
            
        - name: "Redact Connection Strings"
          file: "*/logs/*/*.log"  
          regex:
            - 'postgresql://[^@]+@[^/]+/\w+'
            - 'mysql://[^@]+@[^/]+/\w+'
            - 'mongodb://[^@]+@[^/]+/\w+'
          replacements:
            - 'postgresql://***HIDDEN***@***HIDDEN***/***HIDDEN***'
            - 'mysql://***HIDDEN***@***HIDDEN***/***HIDDEN***'
            - 'mongodb://***HIDDEN***@***HIDDEN***/***HIDDEN***'
{{- end }}