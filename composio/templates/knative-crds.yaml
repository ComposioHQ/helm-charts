{{- if .Values.mercury.useKnative }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: knative-setup-{{ .Release.Name }}
  labels:
    {{- include "composio.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-8"
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: knative-setup-{{ .Release.Name }}
  labels:
    {{- include "composio.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-7"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-setup-{{ .Release.Name }}
subjects:
- kind: ServiceAccount
  name: default
  namespace: {{ include "composio.namespace" . }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: knative-setup-{{ .Release.Revision }}
  namespace: {{ include "composio.namespace" . }}
  labels:
    {{- include "composio.labels" . | nindent 4 }}
    app.kubernetes.io/component: knative-setup
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 2
  activeDeadlineSeconds: 900
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: knative-setup
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          echo "üöÄ Setting up Knative using direct manifests (bypassing operator rate limiting)..."
          
          # Function to apply resource with retry and idempotency
          apply_with_retry() {
            local url=$1
            local resource_type=$2
            echo "üì¶ Applying $resource_type from $url..."
            
            # Apply the resource (idempotent operation)
            local attempt=1
            local max_attempts=3
            
            while [ $attempt -le $max_attempts ]; do
              if timeout 120 kubectl apply -f "$url"; then
                echo "‚úÖ Successfully applied $resource_type"
                return 0
              else
                echo "‚ö†Ô∏è  Attempt $attempt failed for $resource_type, retrying..."
                attempt=$((attempt + 1))
                sleep 10
              fi
            done
            
            echo "‚ùå Failed to apply $resource_type after $max_attempts attempts"
            echo "üîç Checking cluster connectivity..."
            kubectl cluster-info || echo "Cluster connectivity issues detected"
            return 1
          }
          
          # Install Knative Serving CRDs (no operator needed)
          apply_with_retry "https://github.com/knative/serving/releases/download/knative-v1.15.0/serving-crds.yaml" "Knative Serving CRDs"
          
          # Wait for CRDs to be established
          echo "‚è≥ Waiting for Knative Serving CRDs to be ready..."
          if ! kubectl wait --for condition=established --timeout=300s crd/services.serving.knative.dev 2>/dev/null; then
            echo "‚ö†Ô∏è  Timeout waiting for CRDs, checking if they exist..."
            if kubectl get crd services.serving.knative.dev >/dev/null 2>&1; then
              echo "‚úÖ CRD exists, continuing..."
            else
              echo "‚ùå CRD not found, checking what CRDs were created..."
              kubectl get crd | grep knative || echo "No Knative CRDs found"
              echo "‚ö†Ô∏è  Continuing with setup, some features may not work"
            fi
          else
            echo "‚úÖ Knative CRDs are ready"
          fi
          
          # Install Knative Serving Core Components (direct, no operator)
          apply_with_retry "https://github.com/knative/serving/releases/download/knative-v1.15.0/serving-core.yaml" "Knative Serving Core"
          
          # Install Kourier networking
          apply_with_retry "https://github.com/knative/net-kourier/releases/download/knative-v1.15.0/kourier.yaml" "Kourier Networking"
          
          # Configure Knative to use Kourier and fix domain template
          echo "üîß Configuring Knative to use Kourier networking..."
          kubectl patch configmap/config-network \
            --namespace knative-serving \
            --type merge \
            --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}' || {
            echo "‚ö†Ô∏è  ConfigMap patch failed, will retry in background"
          }
          
          # Fix domain template to prevent DNS lookup issues
          echo "üåê Fixing domain template configuration..."
          kubectl patch configmap/config-network \
            --namespace knative-serving \
            --type merge \
            --patch '{"data":{"domainTemplate":"{{.Name}}.{{.Namespace}}.{{.Domain}}"}}' || {
            echo "‚ö†Ô∏è  Domain template patch failed, will retry in background"
          }
          
          echo "‚úÖ Knative setup completed successfully!"
          echo "üìä Installation summary:"
          echo "  ‚Ä¢ Knative Serving CRDs: Installed"
          echo "  ‚Ä¢ Knative Serving Core: Installed" 
          echo "  ‚Ä¢ Kourier Networking: Installed"
          echo "  ‚Ä¢ Network Configuration: Kourier enabled"
          echo "  ‚Ä¢ Domain Template: Fixed for cluster-local services"
          
          # Verify installation
          echo "üîç Verifying installation..."
          kubectl get crd | grep knative | head -5
          echo "üéâ Knative setup job completed!"
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 200m
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
{{- end }}
