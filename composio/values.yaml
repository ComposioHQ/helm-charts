# Development values for Composio
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Namespace configuration
# If create is true, the chart will create namespaces needed by services
# If create is false, you need to create namespaces externally before deploying
namespace:
  create: false
  # Name of the namespace where Composio services will be deployed
  # If not specified, defaults to "composio"
  name: "composio"

global:
  environment: development
  domain: localhost
  imagePullSecrets:
    - name: ecr-secret
  # Add global security defaults for GKE Autopilot

# External secrets configuration
# Pass these during helm install using --set flags:
# --set externalSecrets.ecr.token="$(aws ecr get-login-password --region us-east-1)"
# --set externalSecrets.redis.url="redis://user:pass@host:port"
externalSecrets:
  # ECR authentication - Optional, will only create secret if token is provided
  ecr:
    enabled: true  # Set to false to disable ECR secret creation entirely
    token: ""      # Leave empty to skip ECR secret creation
    server: "008971668139.dkr.ecr.us-east-1.amazonaws.com"
    username: "AWS"

# Global secrets configuration for development
# All secrets will be auto-generated for security

# Application secrets management
secrets:
  # Set to true to enable Helm-based secret creation (not recommended for production)
  # Set to false to use secret-setup.sh script (recommended)
  createAppSecrets: false
  
  # External secret management options
  external:
    # PostgreSQL secret (created by secret-setup.sh)
    postgres:
      enabled: true
      secretName: "external-postgres-secret"
    
    # Redis secret (created by secret-setup.sh)  
    redis:
      enabled: true
      secretName: "external-redis-secret"
    
    # OpenAI secret (created by secret-setup.sh)
    openai:
      enabled: true
      secretName: "openai-secret"

externalPostgreSQL:
  enabled: true

# External Redis configuration
# To use external Redis:
# 1. Set externalRedis.enabled: true
# 2. Set redis.enabled: false
# 3. Provide Redis URL via: --set externalSecrets.redis.url="redis://user:pass@host:port/db"
externalRedis:
  enabled: true
    
redis:
  # Note: Set enabled to false when using external Redis (externalRedis.enabled: true)
  enabled: false
  auth:
    enabled: true
    password: "redis123"
  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: "4Gi"
        cpu: "2"
      limits:
        memory: "4Gi"
        cpu: "2"
    # Disable privileged sysctls for GKE Autopilot
    sysctlImage:
      enabled: false
    sysctl:
      enabled: false


# Apollo service configuration - Development
apollo:
  replicaCount: 2
  image:
    repository: 008971668139.dkr.ecr.us-east-1.amazonaws.com/composio-self-host/apollo
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: NodePort
    port: 9900
    nodePort: 30900
  
  resources:
    requests:
      memory: "5Gi"
      cpu: "1"
    limits:
      memory: "6Gi"
      cpu: "1"
  
  database:
    urlSecret:
      name: "external-postgres-secret"
      key: "url"
  
  # Note: Secrets are now managed globally in the 'secrets' section

# Thermos service configuration - Development
thermos:
  replicaCount: 2
  image:
    repository: 008971668139.dkr.ecr.us-east-1.amazonaws.com/composio-self-host/thermos
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 8180
  
  resources:
    requests:
      memory: "4Gi"
      cpu: "2"
    limits:
      memory: "5Gi"
      cpu: "2"
  
  # Note: Secrets are now managed globally in the 'secrets' section

# DB Init - Enabled for development
dbInit:
  image:
    repository: 008971668139.dkr.ecr.us-east-1.amazonaws.com/composio-self-host/init
    tag: "latest"
    pullPolicy: Always
  adminEmail: "hello@composio.dev"
  database:
    urlSecret:
      name: "external-postgres-secret"
      key: "url"

# Temporal configuration - Using official helm chart as dependency with external PostgreSQL
temporal:
  fullnameOverride: "temporal-stack"
  
  server:
    enabled: true
    replicaCount: 2
    
    config:
      logLevel: "info"
      numHistoryShards: 512
      
      # Configure persistence to use PostgreSQL from external secret
      persistence:
        defaultStore: default
        
        # Main temporal database  
        default:
          driver: "sql"
          sql:
            driver: "postgres12"
            host: "override_some_ip_address_here"
            port: 5432
            database: "temporal"
            user: "postgres"
            existingSecret: "external-postgres-secret"
            maxConns: 20
            maxIdleConns: 20
            maxConnLifetime: "1h"
        
        # Visibility database (will be created by schema setup)
        visibility:
          driver: "sql" 
          sql:
            driver: "postgres12"
            host: "override_some_ip_address_here"
            port: 5432
            database: "temporal_visibility"
            user: "postgres"
            existingSecret: "external-postgres-secret"
            maxConns: 20
            maxIdleConns: 20
            maxConnLifetime: "1h"
      namespaces:
        # Enable this to create namespaces
        create: true
        namespace:
          - name: default
            retention: 7d

    # Frontend service configuration
    frontend:
      service:
        type: ClusterIP
        port: 7233
        membershipPort: 6933
        httpPort: 7243

  # Enable schema setup to create temporal databases
  schema:
    createDatabase:
      enabled: true
    setup:
      enabled: true
      backoffLimit: 100
    update:
      enabled: true
      backoffLimit: 100

  # Enable web UI
  web:
    enabled: true
    replicaCount: 1
    service:
      type: ClusterIP
      port: 8080
  
  admintools:
    enabled: true

  cassandra:
    enabled: false
  mysql:
    enabled: false
  elasticsearch:
    enabled: false
    
  prometheus:
    enabled: false
    nodeExporter:
      enabled: false
  grafana:
    enabled: false

prometheus:
  enabled: false
  nodeExporter:
    enabled: false
  imagePullSecrets: []

grafana:
  enabled: false
  replicas: 1

testFramework:
  enabled: false

rbac:
  create: false
  pspEnabled: false
  namespaced: true

elasticsearch:
  enabled: false

cassandra:
  enabled: false

ingress:
  enabled: false

serviceAccount:
  create: true
  annotations: {}
  name: ""

nodeSelector: {}

tolerations: []

affinity: {}

# AWS configuration - disabled for development
aws:
  region: us-east-1
  s3:
    lambdaBucketName: "tools"
  lambda:
    functionName: "mercury"
    
# Minio configuration - Development
minio:
  replicaCount: 1
  
  # Deployment strategy to prevent Multi-Attach volume errors
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1  # Allow old pod to terminate first
      maxSurge: 0        # Don't create new pod until old one is gone
  
  image:
    repository: 008971668139.dkr.ecr.us-east-1.amazonaws.com/composio-self-host/minio
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
  
  auth:
    rootUser: "minioadmin"
    rootPassword: "minioadmin123"
  
  persistence:
    enabled: true
    size: 8Gi
    accessMode: ReadWriteOnce
    storageClass: ""
  
  resources:
    requests:
      memory: "4Gi"
      cpu: "2"
    limits:
      memory: "4Gi"
      cpu: "2"
  
  livenessProbe:
    httpGet:
      path: /minio/health/live
      port: 9000
    initialDelaySeconds: 120
    periodSeconds: 30
  
  readinessProbe:
    httpGet:
      path: /minio/health/ready
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
  
  extraEnvVars: []

# Mercury service configuration - Development
mercury:
  enabled: true
  useKnative: true
  replicaCount: 1
  image:
    repository: 008971668139.dkr.ecr.us-east-1.amazonaws.com/composio-self-host/mercury
    tag: "latest"
    pullPolicy: Always
  
  # Let the container use its default entrypoint
  # command: []
  # args: []
  
  service:
    type: ClusterIP
    port: 8080
  
  autoscaling:
    minScale: 1
    maxScale: 10
    target: 80
  
  containerConcurrency: 0
  timeoutSeconds: 300
  
  resources:
    requests:
      memory: "2Gi"
      cpu: "1"
    limits:
      memory: "4Gi"
      cpu: "2"
      
  knative:
    minReplicas: 1
    replicas: 2
    maxReplicas: 5

  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    host: ""
    tls: []
  
  volumeMounts: []
  volumes: []
  

supportBundle:
  # Enable/disable support bundle functionality
  enabled: false
  
  # Email address for support ticket submissions
  supportEmail: "support@composio.dev"
  
  # Troubleshoot.sh version to use
  troubleshootVersion: "v0.84.0"
  
  # Output path for support bundles (inside container)
  outputPath: "/tmp/support-bundle"
  
  # Run in non-interactive mode
  interactive: false
  
  # Enable automatic redaction of sensitive data
  redact: true
  
  # Resource limits for support bundle job
  resources:
    limits:
      memory: "512Mi"
      cpu: "500m"
    requests:
      memory: "256Mi"
      cpu: "100m"
  
  # Persistence for support bundle storage
  persistence:
    enabled: false
    size: "1Gi"
    storageClass: ""  # Uses default storage class if empty
    
  # Collector configuration
  collectors:
    # Enable metrics collection (requires Prometheus)
    metrics:
      enabled: false
      
    # Enable database connectivity checks
    database:
      enabled: false
  
  # Analyzer configuration  
  analyzers:
    # Minimum cluster requirements
    minNodes: 1
    minMemoryGB: 2
    minCPU: 1
    
    # Enable custom log analysis
    customChecks: true
    
  # Custom collectors (advanced users)
  customCollectors: []
    # Example:
    # - logs:
    #     selector:
    #       - app=my-custom-app
    #     namespace: custom-namespace
    #     limits:
    #       maxAge: 168h
    #       maxLines: 5000
  
  # Custom analyzers (advanced users) 
  customAnalyzers: []
    # Example:
    # - textAnalyze:
    #     checkName: "Custom Error Check"
    #     fileName: "*/logs/*/*.log"
    #     regex: "CUSTOM_ERROR"
    #     outcomes:
    #       - fail:
    #           when: "true"
    #           message: "Custom error detected"
    
  # Additional redactors
  customRedactors: []
    # Example:
    # - name: "Custom Redactor"
    #   file: "*/logs/*/*.log"
    #   regex:
    #     - 'custom_secret=([^&\s]+)'
    #   replacements:
    #     - 'custom_secret=***HIDDEN***'
